Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

////////////////////////////////////////////////////////////////////////////////
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
//         int len=0;
//         ListNode* temp = head;
//         while(temp != NULL){
//             len++;
//             temp= temp->next;
//         }
//         if(head == NULL){

//             return head;}
//         if(head->next == NULL ){

//         return NULL;}
   
//         int len1=0;
//         int pos =len-n;
//         if(n>len){
            
//             return head->next->next;
//         }

//         ListNode* temp1 = head;
//         while(temp1 !=NULL){
//             if(pos-1 == len1){
//             temp1->next = temp1->next->next;
//             }else{
//                 temp1= temp1->next;
//             }
//             len1++;
//         }
//         return head;
     
      ListNode* d = new ListNode();
        d->next =head;
        
        ListNode* f = d;
        ListNode* s = d;
        
        for(int i=1;i<=n;i++){
            f= f->next;
        }
        
        while(f->next != NULL){

        f= f->next;
            s=s->next;
        }
        ListNode* temp = s->next;
        
        s->next = s->next->next;
        delete temp;
        
        return d->next;
    }
};
