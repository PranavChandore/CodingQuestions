142. Linked List Cycle II

Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
Example 2:


Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
Example 3:


Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        //first thing is comman to all cycle casese
        
        if(head == NULL || head->next ==NULL)
        {
            return NULL;
        }
        
        ListNode *f = head;
        ListNode *s= head;
        ListNode *entry = head;
        while(f !=NULL && f->next !=NULL)
        {
           f=f->next->next;
            s= s->next;
         //whenever our s==f equal then it is a loop point    
            if( s==f)
            {
                //so heear we want contionous operation so we did in same loop
                //try creat entry pointer points to head and entry and slow both now travel 
                //from its starting position and when they are equal thats begingig point of 
                //loop node
                while(entry != s)
                {
                        //entry and slow pointer goahead
                    entry = entry ->next;
                        s= s->next;
                }
                //whenever casese fails then go and return entry node
                return entry;
            }
        }
        return NULL;
    }
};
